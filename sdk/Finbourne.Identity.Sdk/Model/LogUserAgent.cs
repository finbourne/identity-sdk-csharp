/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Identity.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Identity.Sdk.Model
{
    /// <summary>
    /// Represents a LogUserAgent resource in the Okta API
    /// </summary>
    [DataContract(Name = "LogUserAgent")]
    public partial class LogUserAgent : IEquatable<LogUserAgent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogUserAgent" /> class.
        /// </summary>
        /// <param name="rawUserAgent">rawUserAgent.</param>
        /// <param name="varOperatingSystem">varOperatingSystem.</param>
        /// <param name="browser">browser.</param>
        public LogUserAgent(string rawUserAgent = default(string), string varOperatingSystem = default(string), string browser = default(string))
        {
            this.RawUserAgent = rawUserAgent;
            this.VarOperatingSystem = varOperatingSystem;
            this.Browser = browser;
        }

        /// <summary>
        /// Gets or Sets RawUserAgent
        /// </summary>
        [DataMember(Name = "rawUserAgent", EmitDefaultValue = true)]
        public string RawUserAgent { get; set; }

        /// <summary>
        /// Gets or Sets VarOperatingSystem
        /// </summary>
        [DataMember(Name = "operatingSystem", EmitDefaultValue = true)]
        public string VarOperatingSystem { get; set; }

        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [DataMember(Name = "browser", EmitDefaultValue = true)]
        public string Browser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogUserAgent {\n");
            sb.Append("  RawUserAgent: ").Append(RawUserAgent).Append("\n");
            sb.Append("  VarOperatingSystem: ").Append(VarOperatingSystem).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogUserAgent);
        }

        /// <summary>
        /// Returns true if LogUserAgent instances are equal
        /// </summary>
        /// <param name="input">Instance of LogUserAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogUserAgent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RawUserAgent == input.RawUserAgent ||
                    (this.RawUserAgent != null &&
                    this.RawUserAgent.Equals(input.RawUserAgent))
                ) && 
                (
                    this.VarOperatingSystem == input.VarOperatingSystem ||
                    (this.VarOperatingSystem != null &&
                    this.VarOperatingSystem.Equals(input.VarOperatingSystem))
                ) && 
                (
                    this.Browser == input.Browser ||
                    (this.Browser != null &&
                    this.Browser.Equals(input.Browser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RawUserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.RawUserAgent.GetHashCode();
                }
                if (this.VarOperatingSystem != null)
                {
                    hashCode = (hashCode * 59) + this.VarOperatingSystem.GetHashCode();
                }
                if (this.Browser != null)
                {
                    hashCode = (hashCode * 59) + this.Browser.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
