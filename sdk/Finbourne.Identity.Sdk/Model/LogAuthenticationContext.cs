/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Identity.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Identity.Sdk.Model
{
    /// <summary>
    /// Represents a LogAuthenticationContext resource in the Okta API
    /// </summary>
    [DataContract(Name = "LogAuthenticationContext")]
    public partial class LogAuthenticationContext : IEquatable<LogAuthenticationContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogAuthenticationContext" /> class.
        /// </summary>
        /// <param name="authenticationProvider">authenticationProvider.</param>
        /// <param name="credentialProvider">credentialProvider.</param>
        /// <param name="credentialType">credentialType.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="varInterface">varInterface.</param>
        /// <param name="authenticationStep">authenticationStep.</param>
        /// <param name="externalSessionId">externalSessionId.</param>
        public LogAuthenticationContext(string authenticationProvider = default(string), List<string> credentialProvider = default(List<string>), List<string> credentialType = default(List<string>), LogIssuer issuer = default(LogIssuer), string varInterface = default(string), int? authenticationStep = default(int?), string externalSessionId = default(string))
        {
            this.AuthenticationProvider = authenticationProvider;
            this.CredentialProvider = credentialProvider;
            this.CredentialType = credentialType;
            this.Issuer = issuer;
            this.Interface = varInterface;
            this.AuthenticationStep = authenticationStep;
            this.ExternalSessionId = externalSessionId;
        }

        /// <summary>
        /// Gets or Sets AuthenticationProvider
        /// </summary>
        [DataMember(Name = "authenticationProvider", EmitDefaultValue = true)]
        public string AuthenticationProvider { get; set; }

        /// <summary>
        /// Gets or Sets CredentialProvider
        /// </summary>
        [DataMember(Name = "credentialProvider", EmitDefaultValue = true)]
        public List<string> CredentialProvider { get; set; }

        /// <summary>
        /// Gets or Sets CredentialType
        /// </summary>
        [DataMember(Name = "credentialType", EmitDefaultValue = true)]
        public List<string> CredentialType { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name = "issuer", EmitDefaultValue = false)]
        public LogIssuer Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Interface
        /// </summary>
        [DataMember(Name = "interface", EmitDefaultValue = true)]
        public string Interface { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationStep
        /// </summary>
        [DataMember(Name = "authenticationStep", EmitDefaultValue = true)]
        public int? AuthenticationStep { get; set; }

        /// <summary>
        /// Gets or Sets ExternalSessionId
        /// </summary>
        [DataMember(Name = "externalSessionId", EmitDefaultValue = true)]
        public string ExternalSessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogAuthenticationContext {\n");
            sb.Append("  AuthenticationProvider: ").Append(AuthenticationProvider).Append("\n");
            sb.Append("  CredentialProvider: ").Append(CredentialProvider).Append("\n");
            sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Interface: ").Append(Interface).Append("\n");
            sb.Append("  AuthenticationStep: ").Append(AuthenticationStep).Append("\n");
            sb.Append("  ExternalSessionId: ").Append(ExternalSessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogAuthenticationContext);
        }

        /// <summary>
        /// Returns true if LogAuthenticationContext instances are equal
        /// </summary>
        /// <param name="input">Instance of LogAuthenticationContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogAuthenticationContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthenticationProvider == input.AuthenticationProvider ||
                    (this.AuthenticationProvider != null &&
                    this.AuthenticationProvider.Equals(input.AuthenticationProvider))
                ) && 
                (
                    this.CredentialProvider == input.CredentialProvider ||
                    this.CredentialProvider != null &&
                    input.CredentialProvider != null &&
                    this.CredentialProvider.SequenceEqual(input.CredentialProvider)
                ) && 
                (
                    this.CredentialType == input.CredentialType ||
                    this.CredentialType != null &&
                    input.CredentialType != null &&
                    this.CredentialType.SequenceEqual(input.CredentialType)
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Interface == input.Interface ||
                    (this.Interface != null &&
                    this.Interface.Equals(input.Interface))
                ) && 
                (
                    this.AuthenticationStep == input.AuthenticationStep ||
                    (this.AuthenticationStep != null &&
                    this.AuthenticationStep.Equals(input.AuthenticationStep))
                ) && 
                (
                    this.ExternalSessionId == input.ExternalSessionId ||
                    (this.ExternalSessionId != null &&
                    this.ExternalSessionId.Equals(input.ExternalSessionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticationProvider != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationProvider.GetHashCode();
                }
                if (this.CredentialProvider != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialProvider.GetHashCode();
                }
                if (this.CredentialType != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialType.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Interface != null)
                {
                    hashCode = (hashCode * 59) + this.Interface.GetHashCode();
                }
                if (this.AuthenticationStep != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationStep.GetHashCode();
                }
                if (this.ExternalSessionId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalSessionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
