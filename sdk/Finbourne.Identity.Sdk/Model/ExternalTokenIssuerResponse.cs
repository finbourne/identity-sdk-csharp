/*
 * FINBOURNE Identity Service API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Identity.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Identity.Sdk.Model
{
    /// <summary>
    /// Response DTO exposed to client for an external token issuer.
    /// </summary>
    [DataContract(Name = "ExternalTokenIssuerResponse")]
    public partial class ExternalTokenIssuerResponse : IEquatable<ExternalTokenIssuerResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTokenIssuerResponse" /> class.
        /// </summary>
        /// <param name="code">The External Token Issuer Code.</param>
        /// <param name="issuer">Issuer of the External Token Issuer.</param>
        /// <param name="audience">Audience of the External Token Issuer.</param>
        /// <param name="description">The Description of the External Token Issuer.</param>
        /// <param name="claimMappings">claimMappings.</param>
        /// <param name="logoutUrl">The LogoutUrl of the External Token Issuer.</param>
        public ExternalTokenIssuerResponse(string code = default(string), string issuer = default(string), string audience = default(string), string description = default(string), ClaimMappings claimMappings = default(ClaimMappings), string logoutUrl = default(string))
        {
            this.Code = code;
            this.Issuer = issuer;
            this.Audience = audience;
            this.Description = description;
            this.ClaimMappings = claimMappings;
            this.LogoutUrl = logoutUrl;
        }

        /// <summary>
        /// The External Token Issuer Code
        /// </summary>
        /// <value>The External Token Issuer Code</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Issuer of the External Token Issuer
        /// </summary>
        /// <value>Issuer of the External Token Issuer</value>
        [DataMember(Name = "issuer", EmitDefaultValue = true)]
        public string Issuer { get; set; }

        /// <summary>
        /// Audience of the External Token Issuer
        /// </summary>
        /// <value>Audience of the External Token Issuer</value>
        [DataMember(Name = "audience", EmitDefaultValue = true)]
        public string Audience { get; set; }

        /// <summary>
        /// The Description of the External Token Issuer
        /// </summary>
        /// <value>The Description of the External Token Issuer</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ClaimMappings
        /// </summary>
        [DataMember(Name = "claimMappings", EmitDefaultValue = false)]
        public ClaimMappings ClaimMappings { get; set; }

        /// <summary>
        /// The LogoutUrl of the External Token Issuer
        /// </summary>
        /// <value>The LogoutUrl of the External Token Issuer</value>
        [DataMember(Name = "logoutUrl", EmitDefaultValue = true)]
        public string LogoutUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalTokenIssuerResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ClaimMappings: ").Append(ClaimMappings).Append("\n");
            sb.Append("  LogoutUrl: ").Append(LogoutUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalTokenIssuerResponse);
        }

        /// <summary>
        /// Returns true if ExternalTokenIssuerResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalTokenIssuerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalTokenIssuerResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Audience == input.Audience ||
                    (this.Audience != null &&
                    this.Audience.Equals(input.Audience))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ClaimMappings == input.ClaimMappings ||
                    (this.ClaimMappings != null &&
                    this.ClaimMappings.Equals(input.ClaimMappings))
                ) && 
                (
                    this.LogoutUrl == input.LogoutUrl ||
                    (this.LogoutUrl != null &&
                    this.LogoutUrl.Equals(input.LogoutUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Issuer != null)
                {
                    hashCode = (hashCode * 59) + this.Issuer.GetHashCode();
                }
                if (this.Audience != null)
                {
                    hashCode = (hashCode * 59) + this.Audience.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ClaimMappings != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimMappings.GetHashCode();
                }
                if (this.LogoutUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoutUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
